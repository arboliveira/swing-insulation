package br.com.arbo.swinginsulation.examples.numbers;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.SwingConstants;
import javax.swing.border.EtchedBorder;

public final class NumbersPanel extends javax.swing.JPanel implements
		ViewActions {

	public static NumbersPanel make(final String description,
			final String info, final ControllerActions controller) {
		final NumbersPanel p = new NumbersPanel(controller, info);
		p.setInitialContent(description);
		return p;
	}

	@Override
	public void updateProgress(final int current, final int total,
			final String thread) {
		this.jLabel2.setText(String.valueOf(current) + " of " + total);
		this.jLabel3.setText("(" + thread + ")");
		flashboard.flash(total);
	}

	@Override
	public void updateDone(final int number) {
		this.jLabel4.setText(String.valueOf(number) + " crunched.");
		flashboard.finished(number);
	}

	@Override
	public void displayError(final Throwable ex) {
		this.lblLastError.setText(ex.getMessage());
		this.lblLastError.setVisible(true);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jLabel1 = new javax.swing.JLabel();
		jLabel1.setFont(jLabel1.getFont().deriveFont(
				jLabel1.getFont().getSize() + 2f));
		jTextField1 = new javax.swing.JTextField();
		jTextField1.setFont(jTextField1.getFont().deriveFont(
				jTextField1.getFont().getSize() + 4f));
		jButton1 = new javax.swing.JButton();
		jButton1.setIcon(null);
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();

		jLabel1.setDisplayedMnemonic('n');
		jLabel1.setLabelFor(jTextField1);
		jLabel1.setText("Enter numbers separated by spaces:");

		jTextField1.setText("4 8 15 16 23 42");

		jButton1.setFont(jButton1.getFont().deriveFont(
				jButton1.getFont().getSize() + 2f));
		jButton1.setMnemonic('c');
		jButton1.setText("Crunch!");
		jButton1.addActionListener(new java.awt.event.ActionListener() {

			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});

		jLabel2.setText("3 of 5");
		jLabel2.setFont(jLabel2.getFont().deriveFont(
				jLabel2.getFont().getSize() + 4f));
		jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

		jLabel3.setFont(jLabel3.getFont().deriveFont(
				jLabel3.getFont().getSize() + 2f));
		jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabel3.setText("(pool-1-thread-2)");

		jLabel4 = new JLabel("60 crunched.");
		jLabel4.setFont(jLabel4.getFont().deriveFont(
				jLabel4.getFont().getSize() + 4f));
		jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

		lblLastError = new JLabel("Last error");
		lblLastError
				.setIcon(new ImageIcon(
						NumbersPanel.class
								.getResource("/javax/swing/plaf/metal/icons/ocean/warning.png")));
		lblLastError.setForeground(Color.RED);
		lblLastError.setFont(lblLastError.getFont().deriveFont(
				lblLastError.getFont().getSize() + 4f));
		lblLastError.setHorizontalAlignment(SwingConstants.CENTER);

		btnInfo = new JButton("");
		btnInfo.addActionListener(new ActionListener() {

			public void actionPerformed(final ActionEvent e) {
				info();
			}
		});
		btnInfo.setIcon(new ImageIcon(NumbersPanel.class
				.getResource("/javax/swing/plaf/metal/icons/ocean/info.png")));

		pnlCrunching = new JPanel();
		pnlCrunching.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null,
				null));

		final javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		layout
				.setHorizontalGroup(layout
						.createParallelGroup(Alignment.TRAILING)
						.addGroup(
								layout.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												layout.createParallelGroup(
														Alignment.TRAILING)
														.addComponent(
																pnlCrunching,
																Alignment.LEADING,
																GroupLayout.DEFAULT_SIZE,
																426,
																Short.MAX_VALUE)
														.addComponent(
																jTextField1,
																GroupLayout.DEFAULT_SIZE,
																426,
																Short.MAX_VALUE)
														.addComponent(
																jLabel2,
																GroupLayout.DEFAULT_SIZE,
																426,
																Short.MAX_VALUE)
														.addComponent(
																jLabel3,
																GroupLayout.DEFAULT_SIZE,
																426,
																Short.MAX_VALUE)
														.addComponent(
																jLabel4,
																GroupLayout.DEFAULT_SIZE,
																426,
																Short.MAX_VALUE)
														.addComponent(
																lblLastError,
																GroupLayout.DEFAULT_SIZE,
																426,
																Short.MAX_VALUE)
														.addGroup(
																layout.createSequentialGroup()
																		.addComponent(
																				jButton1,
																				GroupLayout.DEFAULT_SIZE,
																				365,
																				Short.MAX_VALUE)
																		.addGap(18)
																		.addComponent(
																				btnInfo,
																				GroupLayout.PREFERRED_SIZE,
																				43,
																				GroupLayout.PREFERRED_SIZE))
														.addComponent(
																jLabel1,
																GroupLayout.DEFAULT_SIZE,
																426,
																Short.MAX_VALUE))
										.addContainerGap()));
		layout
				.setVerticalGroup(layout
						.createParallelGroup(Alignment.LEADING)
						.addGroup(
								layout.createSequentialGroup()
										.addContainerGap()
										.addComponent(jLabel1)
										.addPreferredGap(
												ComponentPlacement.RELATED)
										.addComponent(jTextField1,
												GroupLayout.PREFERRED_SIZE,
												GroupLayout.DEFAULT_SIZE,
												GroupLayout.PREFERRED_SIZE)
										.addGap(18)
										.addGroup(
												layout.createParallelGroup(
														Alignment.BASELINE)
														.addComponent(
																jButton1,
																GroupLayout.PREFERRED_SIZE,
																39,
																GroupLayout.PREFERRED_SIZE)
														.addComponent(
																btnInfo,
																GroupLayout.PREFERRED_SIZE,
																39,
																GroupLayout.PREFERRED_SIZE))
										.addGap(18)
										.addComponent(jLabel2)
										.addPreferredGap(
												ComponentPlacement.RELATED)
										.addComponent(jLabel3)
										.addPreferredGap(
												ComponentPlacement.RELATED)
										.addComponent(jLabel4)
										.addPreferredGap(
												ComponentPlacement.RELATED,
												GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)
										.addComponent(lblLastError)
										.addPreferredGap(
												ComponentPlacement.RELATED)
										.addComponent(pnlCrunching,
												GroupLayout.PREFERRED_SIZE, 40,
												GroupLayout.PREFERRED_SIZE)
										.addContainerGap()));

		lblCrunching = new JLabel("Crunching");
		lblCrunching.setFont(lblCrunching.getFont().deriveFont(
				lblCrunching.getFont().getSize() + 4f));
		pnlCrunching.add(lblCrunching);
		this.setLayout(layout);
	}// </editor-fold>//GEN-END:initComponents

	void jButton1ActionPerformed(
			@SuppressWarnings("unused") final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
		clear();
		final String[] numbers = this.jTextField1.getText().split(" ");
		for (final String number : numbers) {
			this.controllerActions.crunch(number);
		}
	}// GEN-LAST:event_jButton1ActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton jButton1;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JTextField jTextField1;
	private JLabel lblLastError;
	private JButton btnInfo;
	private JLabel lblCrunching;
	private JPanel pnlCrunching;

	// End of variables declaration//GEN-END:variables

	void info() {
		JOptionPane.showMessageDialog(this, info);
	}

	private void setInitialContent(final String description) {
		this.jButton1.setText(description);
		clear();
	}

	private void clear() {
		this.jLabel2.setText(" ");
		this.jLabel3.setText(" ");
		this.jLabel4.setText(" ");
		this.lblLastError.setText(" ");
		this.lblLastError.setVisible(false);
		this.flashboard.clear();
	}

	private NumbersPanel(final ControllerActions controller, final String info) {
		this.controllerActions = controller;
		this.info = info;
		initComponents();
	}

	void addToFlashboard(final JLabel added) {
		pnlCrunching.add(added);
	}

	void clearFlashboard() {
		this.pnlCrunching.removeAll();
		this.pnlCrunching.repaint();
	}

	JLabel getFlashboardLabelTemplate() {
		return lblCrunching;
	}

	private final ControllerActions controllerActions;
	private final String info;

	class Flashboard {

		void clear() {
			map.clear();
			clearFlashboard();
		}

		void flash(final int total) {
			final Integer key = Integer.valueOf(total);
			final JLabel label = determineLabelToFlash(key);
			flash.flash(label);
		}

		void finished(final int number) {
			final Integer key = Integer.valueOf(number);
			final JLabel exists = map.get(key);
			if (exists == null) {
				return;
			}
			exists.setForeground(Color.BLUE);
		}

		private JLabel determineLabelToFlash(final Integer key) {
			final JLabel exists = map.get(key);
			if (exists != null) {
				return exists;
			}
			final JLabel added = addNewLabel(key.toString());
			map.put(key, added);
			return added;
		}

		private JLabel addNewLabel(final String text) {
			final JLabel added = clone(getFlashboardLabelTemplate());
			added.setText(text.toString());
			addToFlashboard(added);
			return added;
		}

		private JLabel clone(final JLabel label) {
			final JLabel value = new JLabel();
			value.setFont(label.getFont());
			return value;
		}

		private final HashMap<Integer, JLabel> map = new HashMap<Integer, JLabel>();
		private final Flash flash = new Flash();
	}

	private final Flashboard flashboard = new Flashboard();
}
